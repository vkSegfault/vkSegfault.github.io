<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://vksegfault.github.io//</id><title>vkSegfault</title><subtitle>Personal blog about Uncharted parts of computing</subtitle> <updated>2023-03-15T09:51:28+01:00</updated> <author> <name>Adrian Jurczak</name> <uri>https://vksegfault.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://vksegfault.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://vksegfault.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 Adrian Jurczak </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Terraform remote backend</title><link href="https://vksegfault.github.io//posts/terraform-remote-backend/" rel="alternate" type="text/html" title="Terraform remote backend" /><published>2023-03-14T00:00:00+01:00</published> <updated>2023-03-14T23:06:10+01:00</updated> <id>https://vksegfault.github.io//posts/terraform-remote-backend/</id> <content src="https://vksegfault.github.io//posts/terraform-remote-backend/" /> <author> <name>Adrian Jurczak</name> </author> <category term="cloud" /> <summary> It is usually a case that for very small (and sometimes even for medium-sized projects) we store our Terraform state file(s) as a part of our repo - in other words we use local state. While this might work quite well if infrastructure is not big enough and not many people will try to change it, there is still possibility to introduce problems that may negatively impact our infrastructure. B... </summary> </entry> <entry><title>Hosting Godot 4 server on AWS and Azure</title><link href="https://vksegfault.github.io//posts/godot-server-aws-azure/" rel="alternate" type="text/html" title="Hosting Godot 4 server on AWS and Azure" /><published>2022-11-27T00:00:00+01:00</published> <updated>2023-03-15T09:50:53+01:00</updated> <id>https://vksegfault.github.io//posts/godot-server-aws-azure/</id> <content src="https://vksegfault.github.io//posts/godot-server-aws-azure/" /> <author> <name>Adrian Jurczak</name> </author> <category term="cloud" /> <category term="godot" /> <category term="aws" /> <category term="azure" /> <category term="terraform" /> <summary> Godot is slowly1 getting to release of version 4 - probably biggest update to date. Most interesting from our perspective is rewritten networking part. While there is stable Godot 3 relase as well, basically everyone is watching out for new major version. Some game developers will jump on this bandwagon soon (and some of them probably did it already). In this article we will take a look how to ... </summary> </entry> <entry><title>SIMD usage in Java</title><link href="https://vksegfault.github.io//posts/java-simd/" rel="alternate" type="text/html" title="SIMD usage in Java" /><published>2021-10-13T00:00:00+02:00</published> <updated>2021-10-13T19:21:12+02:00</updated> <id>https://vksegfault.github.io//posts/java-simd/</id> <content src="https://vksegfault.github.io//posts/java-simd/" /> <author> <name>Adrian Jurczak</name> </author> <category term="CPU" /> <category term="SIMD" /> <summary> You can consider this post as an extension to previously written SIMD usage in C++, C# and Rust. Example verified on OpenJDK 17 build running on Linux. Seems that CPU intrinsics are no longer domain of low level AOT compiled languages. We have pretty nice and easy API in .NET Core 3 and 2021 is the first year to include official language support for SIMD in Java. Since JDK 16 there is... </summary> </entry> <entry><title>Gentle introduction to GPUs inner workings</title><link href="https://vksegfault.github.io//posts/gentle-intro-gpu-inner-workings/" rel="alternate" type="text/html" title="Gentle introduction to GPUs inner workings" /><published>2021-09-20T00:00:00+02:00</published> <updated>2021-10-03T01:19:12+02:00</updated> <id>https://vksegfault.github.io//posts/gentle-intro-gpu-inner-workings/</id> <content src="https://vksegfault.github.io//posts/gentle-intro-gpu-inner-workings/" /> <author> <name>Adrian Jurczak</name> </author> <category term="GPU" /> <summary> This article summarizes some lower level aspect of how GPU executes. Although GPU programming is not that complicated when compared to CPU, it also doesn’t match to what hardware is doing exactly. The reason is that we can’t just program GPU without some API, which is an abstraction over its inner workings. Since few years now, we have modern explicit APIs like DirectX 12 or Vulkan, which shrun... </summary> </entry> <entry><title>SIMD usage in C++, C# and Rust</title><link href="https://vksegfault.github.io//posts/simd-usage-cpp-csharp-rust/" rel="alternate" type="text/html" title="SIMD usage in C++, C# and Rust" /><published>2021-08-06T00:00:00+02:00</published> <updated>2021-10-13T14:42:16+02:00</updated> <id>https://vksegfault.github.io//posts/simd-usage-cpp-csharp-rust/</id> <content src="https://vksegfault.github.io//posts/simd-usage-cpp-csharp-rust/" /> <author> <name>Adrian Jurczak</name> </author> <category term="CPU" /> <category term="SIMD" /> <summary> Everyone heard of SIMD, yet not so many use it. There are probably three main reasons for that: it’s hard to write it correctly, it’s not safe and, most important, compiler can write it for us in many cases (auto vectorization). So why even bother? And answer is: bacause compilers are not that smart and for many performance-critical paths we can’t just rely on the will of compiler. You can easi... </summary> </entry> </feed>
